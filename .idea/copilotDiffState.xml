<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/saschl/sonygps/service/CompanionDeviceManagerSample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/saschl/sonygps/service/CompanionDeviceManagerSample.kt" />
              <option name="originalContent" value="/*&#10; * Copyright 2023 The Android Open Source Project&#10; *&#10; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10; * you may not use this file except in compliance with the License.&#10; * You may obtain a copy of the License at&#10; *&#10; *     https://www.apache.org/licenses/LICENSE-2.0&#10; *&#10; * Unless required by applicable law or agreed to in writing, software&#10; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10; * See the License for the specific language governing permissions and&#10; * limitations under the License.&#10; */&#10;&#10;package com.saschl.sonygps.service&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import android.bluetooth.BluetoothDevice&#10;import android.bluetooth.BluetoothDevice.TRANSPORT_AUTO&#10;import android.bluetooth.BluetoothGatt&#10;import android.bluetooth.BluetoothGattCallback&#10;import android.bluetooth.BluetoothGattCharacteristic&#10;import android.bluetooth.BluetoothGattService&#10;import android.bluetooth.BluetoothManager&#10;import android.bluetooth.BluetoothProfile&#10;import android.bluetooth.le.ScanResult&#10;import android.companion.AssociationInfo&#10;import android.companion.AssociationRequest&#10;import android.companion.BluetoothLeDeviceFilter&#10;import android.companion.CompanionDeviceManager&#10;import android.companion.ObservingDevicePresenceRequest&#10;import android.content.Intent&#10;import android.content.IntentSender&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.IntentSenderRequest&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.annotation.RequiresApi&#10;import androidx.annotation.RequiresPermission&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.rememberUpdatedState&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.SolidColor&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.getSystemService&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.LifecycleEventObserver&#10;import androidx.lifecycle.LifecycleOwner&#10;import androidx.lifecycle.compose.LocalLifecycleOwner&#10;import com.saschl.sonygps.service.CompanionDeviceSampleService.Companion.CHARACTERISTIC_UUID&#10;import com.saschl.sonygps.service.CompanionDeviceSampleService.Companion.SERVICE_UUID&#10;import com.saschl.sonygps.ui.PermissionBox&#10;import kotlinx.coroutines.CompletableDeferred&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import java.nio.ByteBuffer&#10;import java.time.Instant&#10;import java.time.ZoneId&#10;import java.time.ZonedDateTime&#10;import java.util.concurrent.Executor&#10;import java.util.regex.Pattern&#10;import kotlin.random.Random&#10;&#10;@Composable&#10;fun CompanionDeviceManagerSample() {&#10;&#10;    val context = LocalContext.current&#10;    val deviceManager = context.getSystemService&lt;CompanionDeviceManager&gt;()&#10;    val adapter = context.getSystemService&lt;BluetoothManager&gt;()?.adapter&#10;    var selectedDevice by remember {&#10;        mutableStateOf&lt;BluetoothDevice?&gt;(null)&#10;    }&#10;    if (deviceManager == null || adapter == null) {&#10;        Text(text = &quot;No Companion device manager found. The device does not support it.&quot;)&#10;    } else {&#10;        if (selectedDevice == null) {&#10;            PermissionBox(&#10;                permissions = listOf(&#10;                    Manifest.permission.BLUETOOTH_CONNECT,&#10;                    Manifest.permission.ACCESS_FINE_LOCATION,&#10;                    Manifest.permission.ACCESS_BACKGROUND_LOCATION&#10;                )&#10;            ) {&#10;&#10;                DevicesScreen(deviceManager) { device -&gt;&#10;                    selectedDevice =&#10;                        (device.device ?: adapter.getRemoteDevice(device.address))&#10;                }&#10;            }&#10;        } else {&#10;            PermissionBox(&#10;                permissions = listOf(&#10;                    Manifest.permission.BLUETOOTH_CONNECT,&#10;                    Manifest.permission.ACCESS_FINE_LOCATION,&#10;                    Manifest.permission.ACCESS_BACKGROUND_LOCATION&#10;                )&#10;            ) {&#10;                ConnectDeviceScreen(device = selectedDevice!!) {&#10;                    selectedDevice = null&#10;                }&#10;                }&#10;&#10;            }&#10;        }&#10;}&#10;&#10;&#10;private data class DeviceConnectionState(&#10;    val gatt: BluetoothGatt?,&#10;    val connectionState: Int,&#10;    val mtu: Int,&#10;    val services: List&lt;BluetoothGattService&gt; = emptyList(),&#10;    val messageSent: Boolean = false,&#10;    val messageReceived: String = &quot;&quot;,&#10;) {&#10;    companion object {&#10;        val None = DeviceConnectionState(null, -1, -1)&#10;    }&#10;}&#10;&#10;@RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;@Composable&#10;private fun BLEConnectEffect(&#10;    device: BluetoothDevice,&#10;    lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current,&#10;    onStateChange: (DeviceConnectionState) -&gt; Unit,&#10;) {&#10;    val context = LocalContext.current&#10;    val currentOnStateChange by rememberUpdatedState(onStateChange)&#10;&#10;    // Keep the current connection state&#10;    var state by remember {&#10;        mutableStateOf(DeviceConnectionState.None)&#10;    }&#10;&#10;    DisposableEffect(lifecycleOwner, device) {&#10;        // This callback will notify us when things change in the GATT connection so we can update&#10;        // our state&#10;        val callback = object : BluetoothGattCallback() {&#10;            override fun onConnectionStateChange(&#10;                gatt: BluetoothGatt,&#10;                status: Int,&#10;                newState: Int,&#10;            ) {&#10;                super.onConnectionStateChange(gatt, status, newState)&#10;                state = state.copy(gatt = gatt, connectionState = newState)&#10;                currentOnStateChange(state)&#10;&#10;                if (status != BluetoothGatt.GATT_SUCCESS) {&#10;                    // Here you should handle the error returned in status based on the constants&#10;                    // https://developer.android.com/reference/android/bluetooth/BluetoothGatt#summary&#10;                    // For example for GATT_INSUFFICIENT_ENCRYPTION or&#10;                    // GATT_INSUFFICIENT_AUTHENTICATION you should create a bond.&#10;                    // https://developer.android.com/reference/android/bluetooth/BluetoothDevice#createBond()&#10;                    Log.e(&quot;BLEConnectEffect&quot;, &quot;An error happened: $status&quot;)&#10;                }&#10;            }&#10;&#10;            override fun onMtuChanged(gatt: BluetoothGatt, mtu: Int, status: Int) {&#10;                super.onMtuChanged(gatt, mtu, status)&#10;                state = state.copy(gatt = gatt, mtu = mtu)&#10;                currentOnStateChange(state)&#10;            }&#10;&#10;            override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {&#10;                super.onServicesDiscovered(gatt, status)&#10;                state = state.copy(services = gatt.services)&#10;                currentOnStateChange(state)&#10;            }&#10;&#10;            override fun onCharacteristicWrite(&#10;                gatt: BluetoothGatt?,&#10;                characteristic: BluetoothGattCharacteristic?,&#10;                status: Int,&#10;            ) {&#10;                super.onCharacteristicWrite(gatt, characteristic, status)&#10;                state = state.copy(messageSent = status == BluetoothGatt.GATT_SUCCESS)&#10;                currentOnStateChange(state)&#10;            }&#10;&#10;            @Suppress(&quot;DEPRECATION&quot;, &quot;OVERRIDE_DEPRECATION&quot;)&#10;            override fun onCharacteristicRead(&#10;                gatt: BluetoothGatt,&#10;                characteristic: BluetoothGattCharacteristic,&#10;                status: Int,&#10;            ) {&#10;                super.onCharacteristicRead(gatt, characteristic, status)&#10;                //   if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.TIRAMISU) {&#10;                doOnRead(characteristic.value)&#10;                //    }&#10;            }&#10;&#10;            override fun onCharacteristicRead(&#10;                gatt: BluetoothGatt,&#10;                characteristic: BluetoothGattCharacteristic,&#10;                value: ByteArray,&#10;                status: Int,&#10;            ) {&#10;                super.onCharacteristicRead(gatt, characteristic, value, status)&#10;                doOnRead(value)&#10;            }&#10;&#10;            private fun doOnRead(value: ByteArray) {&#10;                state = state.copy(messageReceived = value.decodeToString())&#10;                currentOnStateChange(state)&#10;            }&#10;        }&#10;&#10;        val observer = LifecycleEventObserver { _, event -&gt;&#10;            if (event == Lifecycle.Event.ON_START) {&#10;                if (state.gatt != null) {&#10;                    // If we previously had a GATT connection let's reestablish it&#10;                    state.gatt?.connect()&#10;                } else {&#10;                    // Otherwise create a new GATT connection&#10;                    state = state.copy(&#10;                        gatt = device.connectGatt(&#10;                            context,&#10;                            false,&#10;                            callback,&#10;                            TRANSPORT_AUTO&#10;                        )&#10;                    )&#10;                }&#10;            } else if (event == Lifecycle.Event.ON_STOP) {&#10;                // Unless you have a reason to keep connected while in the bg you should disconnect&#10;                state.gatt?.disconnect()&#10;            }&#10;        }&#10;&#10;        // Add the observer to the lifecycle&#10;        lifecycleOwner.lifecycle.addObserver(observer)&#10;&#10;        // When the effect leaves the Composition, remove the observer and close the connection&#10;        onDispose {&#10;            lifecycleOwner.lifecycle.removeObserver(observer)&#10;            state.gatt?.close()&#10;            state = DeviceConnectionState.None&#10;        }&#10;    }&#10;}&#10;&#10;internal fun Int.toConnectionStateString() = when (this) {&#10;    BluetoothProfile.STATE_CONNECTED -&gt; &quot;Connected&quot;&#10;    BluetoothProfile.STATE_CONNECTING -&gt; &quot;Connecting&quot;&#10;    BluetoothProfile.STATE_DISCONNECTED -&gt; &quot;Disconnected&quot;&#10;    BluetoothProfile.STATE_DISCONNECTING -&gt; &quot;Disconnecting&quot;&#10;    else -&gt; &quot;N/A&quot;&#10;}&#10;&#10;&#10;@RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;@Composable&#10;fun ConnectDeviceScreen(device: BluetoothDevice, onClose: () -&gt; Unit) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Keeps track of the last connection state with the device&#10;    var state by remember(device) {&#10;        mutableStateOf&lt;DeviceConnectionState?&gt;(null)&#10;    }&#10;    // Once the device services are discovered find the GATTServerSample service&#10;    val service by remember(state) {&#10;        mutableStateOf(state?.services?.find { it.uuid == SERVICE_UUID })&#10;    }&#10;    // If the GATTServerSample service is found, get the characteristic&#10;    val characteristic by remember(service) {&#10;        mutableStateOf(service?.getCharacteristic(CHARACTERISTIC_UUID))&#10;    }&#10;&#10;    // This effect will handle the connection and notify when the state changes&#10;    BLEConnectEffect(device = device) {&#10;        // update our state to recompose the UI&#10;        state = it&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;    ) {&#10;        Text(text = &quot;Devices details&quot;, style = MaterialTheme.typography.headlineSmall)&#10;        Text(text = &quot;Name: ${device.name} (${device.address})&quot;)&#10;        Text(text = &quot;Status: ${state?.connectionState?.toConnectionStateString()}&quot;)&#10;        Text(text = &quot;MTU: ${state?.mtu}&quot;)&#10;        Text(text = &quot;Services: ${state?.services?.joinToString { it.uuid.toString() + &quot; &quot; + it.type }}&quot;)&#10;        Text(text = &quot;Message sent: ${state?.messageSent}&quot;)&#10;        Text(text = &quot;Message received: ${state?.messageReceived}&quot;)&#10;        Button(&#10;            onClick = {&#10;                scope.launch(Dispatchers.IO) {&#10;                    if (state?.connectionState == BluetoothProfile.STATE_DISCONNECTED) {&#10;                        //      state?.gatt?.connect()&#10;                    }&#10;                    // Example on how to request specific MTUs&#10;                    // Note that from Android 14 onwards the system will define a default MTU and&#10;                    // it will only be sent once to the peripheral device&#10;                    state?.gatt?.requestMtu(Random.nextInt(27, 190))&#10;                }&#10;            },&#10;        ) {&#10;            Text(text = &quot;Request MTU&quot;)&#10;        }&#10;        Button(&#10;            enabled = state?.gatt != null,&#10;            onClick = {&#10;                scope.launch(Dispatchers.IO) {&#10;                    // Once we have the connection discover the peripheral services&#10;                    state?.gatt?.discoverServices()&#10;                }&#10;            },&#10;        ) {&#10;            Text(text = &quot;Discover&quot;)&#10;        }&#10;        Button(&#10;            enabled = state?.gatt != null &amp;&amp; characteristic != null,&#10;            onClick = {&#10;                /* scope.launch(Dispatchers.IO) {&#10;                     sendData(state?.gatt!!, characteristic!!)&#10;                 }*/&#10;            },&#10;        ) {&#10;            Text(text = &quot;Write to server&quot;)&#10;        }&#10;        Button(&#10;            enabled = state?.gatt != null &amp;&amp; characteristic != null,&#10;            onClick = {&#10;                scope.launch(Dispatchers.IO) {&#10;                    state?.gatt?.readCharacteristic(characteristic)&#10;                }&#10;            },&#10;        ) {&#10;            Text(text = &quot;Read characteristic&quot;)&#10;        }&#10;        Button(onClick = onClose) {&#10;            Text(text = &quot;Close&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;fun set_location(latitude: Double, longitude: Double): ByteArray {&#10;    val myLat = (latitude * 1e7).toInt()&#10;    val myLng = (longitude * 1e7).toInt()&#10;    val myLatByte = ByteBuffer.allocate(4).putInt(myLat).array()&#10;    val myLngByte = ByteBuffer.allocate(4).putInt(myLng).array()&#10;    return myLatByte + myLngByte&#10;}&#10;&#10;fun set_date(zoneId: ZoneId): ByteArray {&#10;    val now = ZonedDateTime.ofInstant(Instant.now(), zoneId)&#10;    val year = now.year.toShort()&#10;    val yearBytes = ByteBuffer.allocate(2).putShort(year).array()&#10;    val hour = now.hour&#10;    return byteArrayOf(&#10;        yearBytes[0], yearBytes[1],&#10;        now.monthValue.toByte(),&#10;        now.dayOfMonth.toByte(),&#10;        now.hour.toByte(),&#10;        now.minute.toByte(),&#10;        now.second.toByte()&#10;    )&#10;}&#10;&#10;&#10;@Composable&#10;private fun DevicesScreen(&#10;    deviceManager: CompanionDeviceManager,&#10;    onConnect: (AssociatedDeviceCompat) -&gt; Unit,&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val context = LocalContext.current&#10;    var associatedDevices by remember {&#10;        // If we already associated the device no need to do it again.&#10;        mutableStateOf(deviceManager.getAssociatedDevices())&#10;    }&#10;&#10;/*    LaunchedEffect(associatedDevices) {&#10;        associatedDevices.forEach {&#10;            //    deviceManager.startObservingDevicePresence(it.address)&#10;        }&#10;&#10;    }*/&#10;&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            Text(&#10;                text = &quot;Sony Camera GPS&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                modifier = Modifier.padding(32.dp),&#10;            )&#10;        }) { innerPadding -&gt;&#10;&#10;        Column(modifier = Modifier&#10;            .padding(innerPadding),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Button(onClick = { context.startActivity(Intent(context, com.saschl.sonygps.ui.LogViewerActivity::class.java))}) { Text(text = &quot;View logs&quot;) }&#10;            ScanForDevicesMenu(deviceManager) {&#10;                associatedDevices = associatedDevices + it&#10;            }&#10;            AssociatedDevicesList(&#10;                associatedDevices = associatedDevices,&#10;                onConnect = onConnect,&#10;                onDisassociate = {&#10;                    scope.launch {&#10;                        deviceManager.disassociate(it.id)&#10;&#10;                        deviceManager.stopObservingDevicePresence(it.address)&#10;&#10;                        associatedDevices = deviceManager.getAssociatedDevices()&#10;                    }&#10;                },&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ScanForDevicesMenu(&#10;    deviceManager: CompanionDeviceManager,&#10;    onDeviceAssociated: (AssociatedDeviceCompat) -&gt; Unit,&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    var errorMessage by remember {&#10;        mutableStateOf(&quot;&quot;)&#10;    }&#10;    val launcher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartIntentSenderForResult(),&#10;    ) {&#10;        when (it.resultCode) {&#10;            CompanionDeviceManager.RESULT_OK -&gt; {&#10;                it.data?.getAssociationResult()?.run {&#10;                    onDeviceAssociated(this)&#10;                }&#10;            }&#10;&#10;            CompanionDeviceManager.RESULT_CANCELED -&gt; {&#10;                errorMessage = &quot;The request was canceled&quot;&#10;            }&#10;&#10;            CompanionDeviceManager.RESULT_INTERNAL_ERROR -&gt; {&#10;                errorMessage = &quot;Internal error happened&quot;&#10;            }&#10;&#10;            CompanionDeviceManager.RESULT_DISCOVERY_TIMEOUT -&gt; {&#10;                errorMessage = &quot;No device matching the given filter were found&quot;&#10;            }&#10;&#10;            CompanionDeviceManager.RESULT_USER_REJECTED -&gt; {&#10;                errorMessage = &quot;The user explicitly declined the request&quot;&#10;            }&#10;&#10;            else -&gt; {&#10;                errorMessage = &quot;Unknown error&quot;&#10;            }&#10;        }&#10;    }&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(MaterialTheme.colorScheme.primaryContainer)&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;    ) {&#10;        Row {&#10;            Text(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .weight(1f),&#10;                text = &quot;Find &amp; associate another device running the GATTServerSample&quot;,&#10;            )&#10;            Button(&#10;                modifier = Modifier.weight(0.3f),&#10;                onClick = {&#10;                    scope.launch {&#10;                        val intentSender = requestDeviceAssociation(deviceManager)&#10;                        launcher.launch(IntentSenderRequest.Builder(intentSender).build())&#10;                    }&#10;                },&#10;            ) {&#10;                Text(text = &quot;Start&quot;)&#10;            }&#10;        }&#10;        if (errorMessage.isNotBlank()) {&#10;            Text(text = errorMessage, color = MaterialTheme.colorScheme.error)&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalFoundationApi::class)&#10;@Composable&#10;private fun AssociatedDevicesList(&#10;    associatedDevices: List&lt;AssociatedDeviceCompat&gt;,&#10;    onConnect: (AssociatedDeviceCompat) -&gt; Unit,&#10;    onDisassociate: (AssociatedDeviceCompat) -&gt; Unit,&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;    ) {&#10;        stickyHeader {&#10;            Text(&#10;                text = &quot;Associated Devices:&quot;,&#10;                modifier = Modifier.padding(vertical = 8.dp),&#10;                style = MaterialTheme.typography.titleMedium,&#10;            )&#10;        }&#10;        items(associatedDevices) { device -&gt;&#10;            Row(&#10;                Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically,&#10;            ) {&#10;                Column(&#10;                    Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(1f),&#10;                ) {&#10;                    Text(text = &quot;ID: ${device.id}&quot;)&#10;                    Text(text = &quot;MAC: ${device.address}&quot;)&#10;                    Text(text = &quot;Name: ${device.name}&quot;)&#10;                }&#10;                Column(&#10;                    Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(0.6f),&#10;                    horizontalAlignment = Alignment.End,&#10;                    verticalArrangement = Arrangement.Center,&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = { onConnect(device) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                    ) {&#10;                        Text(text = &quot;Connect&quot;)&#10;                    }&#10;                    OutlinedButton(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        onClick = { onDisassociate(device) },&#10;                        border = ButtonDefaults.outlinedButtonBorder().copy(&#10;                            brush = SolidColor(MaterialTheme.colorScheme.error),&#10;                        ),&#10;                    ) {&#10;                        Text(text = &quot;Disassociate&quot;, color = MaterialTheme.colorScheme.error)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun Intent.getAssociationResult(): AssociatedDeviceCompat? {&#10;&#10;        return getParcelableExtra(&#10;            CompanionDeviceManager.EXTRA_ASSOCIATION,&#10;            AssociationInfo::class.java,&#10;        )?.toAssociatedDevice()&#10;&#10;}&#10;&#10;private suspend fun requestDeviceAssociation(deviceManager: CompanionDeviceManager): IntentSender {&#10;    // Match only Bluetooth devices whose service UUID matches this pattern.&#10;    // For this demo we will match our GATTServerSample&#10;    val deviceFilter = BluetoothLeDeviceFilter.Builder()&#10;        .setNamePattern(Pattern.compile(&quot;ILCE-6400&quot;))&#10;        .build()&#10;&#10;    val pairingRequest: AssociationRequest = AssociationRequest.Builder()&#10;        // Find only devices that match this request filter.&#10;        .addDeviceFilter(deviceFilter)&#10;        // Stop scanning as soon as one device matching the filter is found.&#10;        .setSingleDevice(true)&#10;        .build()&#10;&#10;    val result = CompletableDeferred&lt;IntentSender&gt;()&#10;&#10;    val callback = object : CompanionDeviceManager.Callback() {&#10;        override fun onAssociationPending(intentSender: IntentSender) {&#10;            result.complete(intentSender)&#10;        }&#10;&#10;        @Suppress(&quot;OVERRIDE_DEPRECATION&quot;)&#10;        override fun onDeviceFound(intentSender: IntentSender) {&#10;            result.complete(intentSender)&#10;        }&#10;&#10;        override fun onAssociationCreated(associationInfo: AssociationInfo) {&#10;&#10;            deviceManager.startObservingDevicePresence(ObservingDevicePresenceRequest.Builder().setAssociationId(associationInfo.id).build())&#10;            // This callback was added in API 33 but the result is also send in the activity result.&#10;            // For handling backwards compatibility we can just have all the logic there instead&#10;        }&#10;&#10;        override fun onFailure(errorMessage: CharSequence?) {&#10;            result.completeExceptionally(IllegalStateException(errorMessage?.toString().orEmpty()))&#10;        }&#10;    }&#10;        val executor = Executor { it.run() }&#10;        deviceManager.associate(pairingRequest, executor, callback)&#10;&#10;    return result.await()&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Copyright 2023 The Android Open Source Project&#10; *&#10; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10; * you may not use this file except in compliance with the License.&#10; * You may obtain a copy of the License at&#10; *&#10; *     https://www.apache.org/licenses/LICENSE-2.0&#10; *&#10; * Unless required by applicable law or agreed to in writing, software&#10; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10; * See the License for the specific language governing permissions and&#10; * limitations under the License.&#10; */&#10;&#10;package com.saschl.sonygps.service&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import android.bluetooth.BluetoothDevice&#10;import android.bluetooth.BluetoothDevice.TRANSPORT_AUTO&#10;import android.bluetooth.BluetoothGatt&#10;import android.bluetooth.BluetoothGattCallback&#10;import android.bluetooth.BluetoothGattCharacteristic&#10;import android.bluetooth.BluetoothGattService&#10;import android.bluetooth.BluetoothManager&#10;import android.bluetooth.BluetoothProfile&#10;import android.bluetooth.le.ScanResult&#10;import android.companion.AssociationInfo&#10;import android.companion.AssociationRequest&#10;import android.companion.BluetoothLeDeviceFilter&#10;import android.companion.CompanionDeviceManager&#10;import android.companion.ObservingDevicePresenceRequest&#10;import android.content.Intent&#10;import android.content.IntentSender&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.IntentSenderRequest&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.annotation.RequiresApi&#10;import androidx.annotation.RequiresPermission&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.rememberUpdatedState&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.SolidColor&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.getSystemService&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.LifecycleEventObserver&#10;import androidx.lifecycle.LifecycleOwner&#10;import androidx.lifecycle.compose.LocalLifecycleOwner&#10;import com.saschl.sonygps.service.CompanionDeviceSampleService.Companion.CHARACTERISTIC_UUID&#10;import com.saschl.sonygps.service.CompanionDeviceSampleService.Companion.SERVICE_UUID&#10;import com.saschl.sonygps.ui.EnhancedLocationPermissionBox&#10;import com.saschl.sonygps.ui.PermissionBox&#10;import kotlinx.coroutines.CompletableDeferred&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import java.nio.ByteBuffer&#10;import java.time.Instant&#10;import java.time.ZoneId&#10;import java.time.ZonedDateTime&#10;import java.util.concurrent.Executor&#10;import java.util.regex.Pattern&#10;import kotlin.random.Random&#10;&#10;@Composable&#10;fun CompanionDeviceManagerSample() {&#10;&#10;    val context = LocalContext.current&#10;    val deviceManager = context.getSystemService&lt;CompanionDeviceManager&gt;()&#10;    val adapter = context.getSystemService&lt;BluetoothManager&gt;()?.adapter&#10;    var selectedDevice by remember {&#10;        mutableStateOf&lt;BluetoothDevice?&gt;(null)&#10;    }&#10;    if (deviceManager == null || adapter == null) {&#10;        Text(text = &quot;No Companion device manager found. The device does not support it.&quot;)&#10;    } else {&#10;        if (selectedDevice == null) {&#10;            EnhancedLocationPermissionBox {&#10;                DevicesScreen(deviceManager) { device -&gt;&#10;                    selectedDevice =&#10;                        (device.device ?: adapter.getRemoteDevice(device.address))&#10;                }&#10;            }&#10;        } else {&#10;            EnhancedLocationPermissionBox {&#10;                ConnectDeviceScreen(device = selectedDevice!!) {&#10;                    selectedDevice = null&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;private data class DeviceConnectionState(&#10;    val gatt: BluetoothGatt?,&#10;    val connectionState: Int,&#10;    val mtu: Int,&#10;    val services: List&lt;BluetoothGattService&gt; = emptyList(),&#10;    val messageSent: Boolean = false,&#10;    val messageReceived: String = &quot;&quot;,&#10;) {&#10;    companion object {&#10;        val None = DeviceConnectionState(null, -1, -1)&#10;    }&#10;}&#10;&#10;@RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;@Composable&#10;private fun BLEConnectEffect(&#10;    device: BluetoothDevice,&#10;    lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current,&#10;    onStateChange: (DeviceConnectionState) -&gt; Unit,&#10;) {&#10;    val context = LocalContext.current&#10;    val currentOnStateChange by rememberUpdatedState(onStateChange)&#10;&#10;    // Keep the current connection state&#10;    var state by remember {&#10;        mutableStateOf(DeviceConnectionState.None)&#10;    }&#10;&#10;    DisposableEffect(lifecycleOwner, device) {&#10;        // This callback will notify us when things change in the GATT connection so we can update&#10;        // our state&#10;        val callback = object : BluetoothGattCallback() {&#10;            override fun onConnectionStateChange(&#10;                gatt: BluetoothGatt,&#10;                status: Int,&#10;                newState: Int,&#10;            ) {&#10;                super.onConnectionStateChange(gatt, status, newState)&#10;                state = state.copy(gatt = gatt, connectionState = newState)&#10;                currentOnStateChange(state)&#10;&#10;                if (status != BluetoothGatt.GATT_SUCCESS) {&#10;                    // Here you should handle the error returned in status based on the constants&#10;                    // https://developer.android.com/reference/android/bluetooth/BluetoothGatt#summary&#10;                    // For example for GATT_INSUFFICIENT_ENCRYPTION or&#10;                    // GATT_INSUFFICIENT_AUTHENTICATION you should create a bond.&#10;                    // https://developer.android.com/reference/android/bluetooth/BluetoothDevice#createBond()&#10;                    Log.e(&quot;BLEConnectEffect&quot;, &quot;An error happened: $status&quot;)&#10;                }&#10;            }&#10;&#10;            override fun onMtuChanged(gatt: BluetoothGatt, mtu: Int, status: Int) {&#10;                super.onMtuChanged(gatt, mtu, status)&#10;                state = state.copy(gatt = gatt, mtu = mtu)&#10;                currentOnStateChange(state)&#10;            }&#10;&#10;            override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {&#10;                super.onServicesDiscovered(gatt, status)&#10;                state = state.copy(services = gatt.services)&#10;                currentOnStateChange(state)&#10;            }&#10;&#10;            override fun onCharacteristicWrite(&#10;                gatt: BluetoothGatt?,&#10;                characteristic: BluetoothGattCharacteristic?,&#10;                status: Int,&#10;            ) {&#10;                super.onCharacteristicWrite(gatt, characteristic, status)&#10;                state = state.copy(messageSent = status == BluetoothGatt.GATT_SUCCESS)&#10;                currentOnStateChange(state)&#10;            }&#10;&#10;            @Suppress(&quot;DEPRECATION&quot;, &quot;OVERRIDE_DEPRECATION&quot;)&#10;            override fun onCharacteristicRead(&#10;                gatt: BluetoothGatt,&#10;                characteristic: BluetoothGattCharacteristic,&#10;                status: Int,&#10;            ) {&#10;                super.onCharacteristicRead(gatt, characteristic, status)&#10;                //   if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.TIRAMISU) {&#10;                doOnRead(characteristic.value)&#10;                //    }&#10;            }&#10;&#10;            override fun onCharacteristicRead(&#10;                gatt: BluetoothGatt,&#10;                characteristic: BluetoothGattCharacteristic,&#10;                value: ByteArray,&#10;                status: Int,&#10;            ) {&#10;                super.onCharacteristicRead(gatt, characteristic, value, status)&#10;                doOnRead(value)&#10;            }&#10;&#10;            private fun doOnRead(value: ByteArray) {&#10;                state = state.copy(messageReceived = value.decodeToString())&#10;                currentOnStateChange(state)&#10;            }&#10;        }&#10;&#10;        val observer = LifecycleEventObserver { _, event -&gt;&#10;            if (event == Lifecycle.Event.ON_START) {&#10;                if (state.gatt != null) {&#10;                    // If we previously had a GATT connection let's reestablish it&#10;                    state.gatt?.connect()&#10;                } else {&#10;                    // Otherwise create a new GATT connection&#10;                    state = state.copy(&#10;                        gatt = device.connectGatt(&#10;                            context,&#10;                            false,&#10;                            callback,&#10;                            TRANSPORT_AUTO&#10;                        )&#10;                    )&#10;                }&#10;            } else if (event == Lifecycle.Event.ON_STOP) {&#10;                // Unless you have a reason to keep connected while in the bg you should disconnect&#10;                state.gatt?.disconnect()&#10;            }&#10;        }&#10;&#10;        // Add the observer to the lifecycle&#10;        lifecycleOwner.lifecycle.addObserver(observer)&#10;&#10;        // When the effect leaves the Composition, remove the observer and close the connection&#10;        onDispose {&#10;            lifecycleOwner.lifecycle.removeObserver(observer)&#10;            state.gatt?.close()&#10;            state = DeviceConnectionState.None&#10;        }&#10;    }&#10;}&#10;&#10;internal fun Int.toConnectionStateString() = when (this) {&#10;    BluetoothProfile.STATE_CONNECTED -&gt; &quot;Connected&quot;&#10;    BluetoothProfile.STATE_CONNECTING -&gt; &quot;Connecting&quot;&#10;    BluetoothProfile.STATE_DISCONNECTED -&gt; &quot;Disconnected&quot;&#10;    BluetoothProfile.STATE_DISCONNECTING -&gt; &quot;Disconnecting&quot;&#10;    else -&gt; &quot;N/A&quot;&#10;}&#10;&#10;&#10;@RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;@Composable&#10;fun ConnectDeviceScreen(device: BluetoothDevice, onClose: () -&gt; Unit) {&#10;    val scope = rememberCoroutineScope()&#10;&#10;    // Keeps track of the last connection state with the device&#10;    var state by remember(device) {&#10;        mutableStateOf&lt;DeviceConnectionState?&gt;(null)&#10;    }&#10;    // Once the device services are discovered find the GATTServerSample service&#10;    val service by remember(state) {&#10;        mutableStateOf(state?.services?.find { it.uuid == SERVICE_UUID })&#10;    }&#10;    // If the GATTServerSample service is found, get the characteristic&#10;    val characteristic by remember(service) {&#10;        mutableStateOf(service?.getCharacteristic(CHARACTERISTIC_UUID))&#10;    }&#10;&#10;    // This effect will handle the connection and notify when the state changes&#10;    BLEConnectEffect(device = device) {&#10;        // update our state to recompose the UI&#10;        state = it&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;    ) {&#10;        Text(text = &quot;Devices details&quot;, style = MaterialTheme.typography.headlineSmall)&#10;        Text(text = &quot;Name: ${device.name} (${device.address})&quot;)&#10;        Text(text = &quot;Status: ${state?.connectionState?.toConnectionStateString()}&quot;)&#10;        Text(text = &quot;MTU: ${state?.mtu}&quot;)&#10;        Text(text = &quot;Services: ${state?.services?.joinToString { it.uuid.toString() + &quot; &quot; + it.type }}&quot;)&#10;        Text(text = &quot;Message sent: ${state?.messageSent}&quot;)&#10;        Text(text = &quot;Message received: ${state?.messageReceived}&quot;)&#10;        Button(&#10;            onClick = {&#10;                scope.launch(Dispatchers.IO) {&#10;                    if (state?.connectionState == BluetoothProfile.STATE_DISCONNECTED) {&#10;                        //      state?.gatt?.connect()&#10;                    }&#10;                    // Example on how to request specific MTUs&#10;                    // Note that from Android 14 onwards the system will define a default MTU and&#10;                    // it will only be sent once to the peripheral device&#10;                    state?.gatt?.requestMtu(Random.nextInt(27, 190))&#10;                }&#10;            },&#10;        ) {&#10;            Text(text = &quot;Request MTU&quot;)&#10;        }&#10;        Button(&#10;            enabled = state?.gatt != null,&#10;            onClick = {&#10;                scope.launch(Dispatchers.IO) {&#10;                    // Once we have the connection discover the peripheral services&#10;                    state?.gatt?.discoverServices()&#10;                }&#10;            },&#10;        ) {&#10;            Text(text = &quot;Discover&quot;)&#10;        }&#10;        Button(&#10;            enabled = state?.gatt != null &amp;&amp; characteristic != null,&#10;            onClick = {&#10;                /* scope.launch(Dispatchers.IO) {&#10;                     sendData(state?.gatt!!, characteristic!!)&#10;                 }*/&#10;            },&#10;        ) {&#10;            Text(text = &quot;Write to server&quot;)&#10;        }&#10;        Button(&#10;            enabled = state?.gatt != null &amp;&amp; characteristic != null,&#10;            onClick = {&#10;                scope.launch(Dispatchers.IO) {&#10;                    state?.gatt?.readCharacteristic(characteristic)&#10;                }&#10;            },&#10;        ) {&#10;            Text(text = &quot;Read characteristic&quot;)&#10;        }&#10;        Button(onClick = onClose) {&#10;            Text(text = &quot;Close&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;fun set_location(latitude: Double, longitude: Double): ByteArray {&#10;    val myLat = (latitude * 1e7).toInt()&#10;    val myLng = (longitude * 1e7).toInt()&#10;    val myLatByte = ByteBuffer.allocate(4).putInt(myLat).array()&#10;    val myLngByte = ByteBuffer.allocate(4).putInt(myLng).array()&#10;    return myLatByte + myLngByte&#10;}&#10;&#10;fun set_date(zoneId: ZoneId): ByteArray {&#10;    val now = ZonedDateTime.ofInstant(Instant.now(), zoneId)&#10;    val year = now.year.toShort()&#10;    val yearBytes = ByteBuffer.allocate(2).putShort(year).array()&#10;    val hour = now.hour&#10;    return byteArrayOf(&#10;        yearBytes[0], yearBytes[1],&#10;        now.monthValue.toByte(),&#10;        now.dayOfMonth.toByte(),&#10;        now.hour.toByte(),&#10;        now.minute.toByte(),&#10;        now.second.toByte()&#10;    )&#10;}&#10;&#10;&#10;@Composable&#10;private fun DevicesScreen(&#10;    deviceManager: CompanionDeviceManager,&#10;    onConnect: (AssociatedDeviceCompat) -&gt; Unit,&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    val context = LocalContext.current&#10;    var associatedDevices by remember {&#10;        // If we already associated the device no need to do it again.&#10;        mutableStateOf(deviceManager.getAssociatedDevices())&#10;    }&#10;&#10;/*    LaunchedEffect(associatedDevices) {&#10;        associatedDevices.forEach {&#10;            //    deviceManager.startObservingDevicePresence(it.address)&#10;        }&#10;&#10;    }*/&#10;&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            Text(&#10;                text = &quot;Sony Camera GPS&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                modifier = Modifier.padding(32.dp),&#10;            )&#10;        }) { innerPadding -&gt;&#10;&#10;        Column(modifier = Modifier&#10;            .padding(innerPadding),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Button(onClick = { context.startActivity(Intent(context, com.saschl.sonygps.ui.LogViewerActivity::class.java))}) { Text(text = &quot;View logs&quot;) }&#10;            ScanForDevicesMenu(deviceManager) {&#10;                associatedDevices = associatedDevices + it&#10;            }&#10;            AssociatedDevicesList(&#10;                associatedDevices = associatedDevices,&#10;                onConnect = onConnect,&#10;                onDisassociate = {&#10;                    scope.launch {&#10;                        deviceManager.disassociate(it.id)&#10;&#10;                        deviceManager.stopObservingDevicePresence(it.address)&#10;&#10;                        associatedDevices = deviceManager.getAssociatedDevices()&#10;                    }&#10;                },&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ScanForDevicesMenu(&#10;    deviceManager: CompanionDeviceManager,&#10;    onDeviceAssociated: (AssociatedDeviceCompat) -&gt; Unit,&#10;) {&#10;    val scope = rememberCoroutineScope()&#10;    var errorMessage by remember {&#10;        mutableStateOf(&quot;&quot;)&#10;    }&#10;    val launcher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartIntentSenderForResult(),&#10;    ) {&#10;        when (it.resultCode) {&#10;            CompanionDeviceManager.RESULT_OK -&gt; {&#10;                it.data?.getAssociationResult()?.run {&#10;                    onDeviceAssociated(this)&#10;                }&#10;            }&#10;&#10;            CompanionDeviceManager.RESULT_CANCELED -&gt; {&#10;                errorMessage = &quot;The request was canceled&quot;&#10;            }&#10;&#10;            CompanionDeviceManager.RESULT_INTERNAL_ERROR -&gt; {&#10;                errorMessage = &quot;Internal error happened&quot;&#10;            }&#10;&#10;            CompanionDeviceManager.RESULT_DISCOVERY_TIMEOUT -&gt; {&#10;                errorMessage = &quot;No device matching the given filter were found&quot;&#10;            }&#10;&#10;            CompanionDeviceManager.RESULT_USER_REJECTED -&gt; {&#10;                errorMessage = &quot;The user explicitly declined the request&quot;&#10;            }&#10;&#10;            else -&gt; {&#10;                errorMessage = &quot;Unknown error&quot;&#10;            }&#10;        }&#10;    }&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(MaterialTheme.colorScheme.primaryContainer)&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;    ) {&#10;        Row {&#10;            Text(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .weight(1f),&#10;                text = &quot;Find &amp; associate another device running the GATTServerSample&quot;,&#10;            )&#10;            Button(&#10;                modifier = Modifier.weight(0.3f),&#10;                onClick = {&#10;                    scope.launch {&#10;                        val intentSender = requestDeviceAssociation(deviceManager)&#10;                        launcher.launch(IntentSenderRequest.Builder(intentSender).build())&#10;                    }&#10;                },&#10;            ) {&#10;                Text(text = &quot;Start&quot;)&#10;            }&#10;        }&#10;        if (errorMessage.isNotBlank()) {&#10;            Text(text = errorMessage, color = MaterialTheme.colorScheme.error)&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalFoundationApi::class)&#10;@Composable&#10;private fun AssociatedDevicesList(&#10;    associatedDevices: List&lt;AssociatedDeviceCompat&gt;,&#10;    onConnect: (AssociatedDeviceCompat) -&gt; Unit,&#10;    onDisassociate: (AssociatedDeviceCompat) -&gt; Unit,&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;    ) {&#10;        stickyHeader {&#10;            Text(&#10;                text = &quot;Associated Devices:&quot;,&#10;                modifier = Modifier.padding(vertical = 8.dp),&#10;                style = MaterialTheme.typography.titleMedium,&#10;            )&#10;        }&#10;        items(associatedDevices) { device -&gt;&#10;            Row(&#10;                Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically,&#10;            ) {&#10;                Column(&#10;                    Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(1f),&#10;                ) {&#10;                    Text(text = &quot;ID: ${device.id}&quot;)&#10;                    Text(text = &quot;MAC: ${device.address}&quot;)&#10;                    Text(text = &quot;Name: ${device.name}&quot;)&#10;                }&#10;                Column(&#10;                    Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(0.6f),&#10;                    horizontalAlignment = Alignment.End,&#10;                    verticalArrangement = Arrangement.Center,&#10;                ) {&#10;                    OutlinedButton(&#10;                        onClick = { onConnect(device) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                    ) {&#10;                        Text(text = &quot;Connect&quot;)&#10;                    }&#10;                    OutlinedButton(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        onClick = { onDisassociate(device) },&#10;                        border = ButtonDefaults.outlinedButtonBorder().copy(&#10;                            brush = SolidColor(MaterialTheme.colorScheme.error),&#10;                        ),&#10;                    ) {&#10;                        Text(text = &quot;Disassociate&quot;, color = MaterialTheme.colorScheme.error)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun Intent.getAssociationResult(): AssociatedDeviceCompat? {&#10;&#10;        return getParcelableExtra(&#10;            CompanionDeviceManager.EXTRA_ASSOCIATION,&#10;            AssociationInfo::class.java,&#10;        )?.toAssociatedDevice()&#10;&#10;}&#10;&#10;private suspend fun requestDeviceAssociation(deviceManager: CompanionDeviceManager): IntentSender {&#10;    // Match only Bluetooth devices whose service UUID matches this pattern.&#10;    // For this demo we will match our GATTServerSample&#10;    val deviceFilter = BluetoothLeDeviceFilter.Builder()&#10;        .setNamePattern(Pattern.compile(&quot;ILCE-6400&quot;))&#10;        .build()&#10;&#10;    val pairingRequest: AssociationRequest = AssociationRequest.Builder()&#10;        // Find only devices that match this request filter.&#10;        .addDeviceFilter(deviceFilter)&#10;        // Stop scanning as soon as one device matching the filter is found.&#10;        .setSingleDevice(true)&#10;        .build()&#10;&#10;    val result = CompletableDeferred&lt;IntentSender&gt;()&#10;&#10;    val callback = object : CompanionDeviceManager.Callback() {&#10;        override fun onAssociationPending(intentSender: IntentSender) {&#10;            result.complete(intentSender)&#10;        }&#10;&#10;        @Suppress(&quot;OVERRIDE_DEPRECATION&quot;)&#10;        override fun onDeviceFound(intentSender: IntentSender) {&#10;            result.complete(intentSender)&#10;        }&#10;&#10;        override fun onAssociationCreated(associationInfo: AssociationInfo) {&#10;&#10;            deviceManager.startObservingDevicePresence(ObservingDevicePresenceRequest.Builder().setAssociationId(associationInfo.id).build())&#10;            // This callback was added in API 33 but the result is also send in the activity result.&#10;            // For handling backwards compatibility we can just have all the logic there instead&#10;        }&#10;&#10;        override fun onFailure(errorMessage: CharSequence?) {&#10;            result.completeExceptionally(IllegalStateException(errorMessage?.toString().orEmpty()))&#10;        }&#10;    }&#10;        val executor = Executor { it.run() }&#10;        deviceManager.associate(pairingRequest, executor, callback)&#10;&#10;    return result.await()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/saschl/sonygps/ui/PermissionBox.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/saschl/sonygps/ui/PermissionBox.kt" />
              <option name="originalContent" value="/*&#10; * Copyright 2023 The Android Open Source Project&#10; *&#10; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10; * you may not use this file except in compliance with the License.&#10; * You may obtain a copy of the License at&#10; *&#10; *     https://www.apache.org/licenses/LICENSE-2.0&#10; *&#10; * Unless required by applicable law or agreed to in writing, software&#10; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10; * See the License for the specific language governing permissions and&#10; * limitations under the License.&#10; */&#10;&#10;package com.saschl.sonygps.ui&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Build&#10;import android.provider.Settings&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.BoxScope&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.rounded.Settings&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import com.google.accompanist.permissions.ExperimentalPermissionsApi&#10;import com.google.accompanist.permissions.MultiplePermissionsState&#10;import com.google.accompanist.permissions.isGranted&#10;import com.google.accompanist.permissions.rememberMultiplePermissionsState&#10;&#10;/**&#10; * The PermissionBox uses a [Box] to show a simple permission request UI when the provided [permission]&#10; * is revoked or the provided [onGranted] content if the permission is granted.&#10; *&#10; * This composable follows the permission request flow but for a complete example check the samples&#10; * under privacy/permissions&#10; */&#10;@Composable&#10;fun PermissionBox(&#10;    modifier: Modifier = Modifier,&#10;    permission: String,&#10;    description: String? = null,&#10;    contentAlignment: Alignment = Alignment.TopStart,&#10;    onGranted: @Composable BoxScope.() -&gt; Unit,&#10;) {&#10;    PermissionBox(&#10;        modifier,&#10;        permissions = listOf(permission),&#10;        requiredPermissions = listOf(permission),&#10;        description,&#10;        contentAlignment,&#10;    ) { onGranted() }&#10;}&#10;&#10;/**&#10; * A variation of [PermissionBox] that takes a list of permissions and only calls [onGranted] when&#10; * all the [requiredPermissions] are granted.&#10; *&#10; * By default it assumes that all [permissions] are required.&#10; */&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;fun PermissionBox(&#10;    modifier: Modifier = Modifier,&#10;    permissions: List&lt;String&gt;,&#10;    requiredPermissions: List&lt;String&gt; = permissions,&#10;    description: String? = null,&#10;    contentAlignment: Alignment = Alignment.TopStart,&#10;    onGranted: @Composable BoxScope.(List&lt;String&gt;) -&gt; Unit,&#10;) {&#10;    val context = LocalContext.current&#10;    var errorText by remember {&#10;        mutableStateOf(&quot;&quot;)&#10;    }&#10;&#10;    val permissionState = rememberMultiplePermissionsState(permissions = permissions) { map -&gt;&#10;        val rejectedPermissions = map.filterValues { !it }.keys&#10;        errorText = if (rejectedPermissions.none { it in requiredPermissions }) {&#10;            &quot;&quot;&#10;        } else {&#10;            &quot;${rejectedPermissions.joinToString()} required for the sample&quot;&#10;        }&#10;    }&#10;    val allRequiredPermissionsGranted =&#10;        permissionState.revokedPermissions.none { it.permission in requiredPermissions }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .then(modifier),&#10;        contentAlignment = if (allRequiredPermissionsGranted) {&#10;            contentAlignment&#10;        } else {&#10;            Alignment.Center&#10;        },&#10;    ) {&#10;        if (allRequiredPermissionsGranted) {&#10;            onGranted(&#10;                permissionState.permissions&#10;                    .filter { it.status.isGranted }&#10;                    .map { it.permission },&#10;            )&#10;        } else {&#10;            PermissionScreen(&#10;                permissionState,&#10;                description,&#10;                errorText,&#10;            )&#10;&#10;            FloatingActionButton(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomEnd)&#10;                    .padding(16.dp),&#10;                onClick = {&#10;                    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {&#10;                        flags = Intent.FLAG_ACTIVITY_NEW_TASK&#10;                        data = Uri.parse(&quot;package:${context.packageName}&quot;)&#10;                    }&#10;                    context.startActivity(intent)&#10;                },&#10;            ) {&#10;                Icon(imageVector = Icons.Rounded.Settings, contentDescription = &quot;App settings&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;private fun PermissionScreen(&#10;    state: MultiplePermissionsState,&#10;    description: String?,&#10;    errorText: String,&#10;) {&#10;    var showRationale by remember(state) {&#10;        mutableStateOf(false)&#10;    }&#10;&#10;    val permissions = remember(state.revokedPermissions) {&#10;        state.revokedPermissions.joinToString(&quot;\n&quot;) {&#10;            &quot; - &quot; + it.permission.removePrefix(&quot;android.permission.&quot;)&#10;        }&#10;    }&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .animateContentSize(),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;    ) {&#10;        Text(&#10;            text = &quot;Sample requires permission/s:&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            modifier = Modifier.padding(16.dp),&#10;        )&#10;        Text(&#10;            text = permissions,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.padding(16.dp),&#10;        )&#10;        if (description != null) {&#10;            Text(&#10;                text = description,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                modifier = Modifier.padding(16.dp),&#10;            )&#10;        }&#10;        Button(&#10;            onClick = {&#10;                if (state.shouldShowRationale) {&#10;                    showRationale = true&#10;                } else {&#10;                    state.launchMultiplePermissionRequest()&#10;                }&#10;            },&#10;        ) {&#10;            Text(text = &quot;Grant permissions&quot;)&#10;        }&#10;        if (errorText.isNotBlank()) {&#10;            Text(&#10;                text = errorText,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                modifier = Modifier.padding(16.dp),&#10;            )&#10;        }&#10;    }&#10;    if (showRationale) {&#10;        AlertDialog(&#10;            onDismissRequest = {&#10;                showRationale = false&#10;            },&#10;            title = {&#10;                Text(text = &quot;Permissions required by the sample&quot;)&#10;            },&#10;            text = {&#10;                Text(text = &quot;The sample requires the following permissions to work:\n $permissions&quot;)&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showRationale = false&#10;                        state.launchMultiplePermissionRequest()&#10;                    },&#10;                ) {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showRationale = false&#10;                    },&#10;                ) {&#10;                    Text(&quot;Dismiss&quot;)&#10;                }&#10;            },&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Enhanced PermissionBox that properly handles background location permission according to Android guidelines.&#10; * For Android 10+ (API 29+), background location must be requested separately from foreground location.&#10; */&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;fun EnhancedLocationPermissionBox(&#10;    modifier: Modifier = Modifier,&#10;    contentAlignment: Alignment = Alignment.TopStart,&#10;    onAllPermissionsGranted: @Composable BoxScope.() -&gt; Unit,&#10;) {&#10;    val context = LocalContext.current&#10;    var errorText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Foreground location permissions&#10;    val foregroundLocationPermissions = listOf(&#10;        Manifest.permission.ACCESS_FINE_LOCATION,&#10;        Manifest.permission.BLUETOOTH_CONNECT&#10;    )&#10;&#10;    val foregroundPermissionState = rememberMultiplePermissionsState(&#10;        permissions = foregroundLocationPermissions&#10;    ) { map -&gt;&#10;        val rejectedPermissions = map.filterValues { !it }.keys&#10;        errorText = if (rejectedPermissions.isNotEmpty()) {&#10;            &quot;${rejectedPermissions.joinToString()} required for the app to function&quot;&#10;        } else {&#10;            &quot;&quot;&#10;        }&#10;    }&#10;&#10;    // Background location permission (separate for Android 10+)&#10;    val backgroundLocationPermission = rememberPermissionState(&#10;        permission = Manifest.permission.ACCESS_BACKGROUND_LOCATION&#10;    ) { granted -&gt;&#10;        if (!granted) {&#10;            errorText = &quot;Background location access required for continuous GPS sync when app is not in foreground&quot;&#10;        } else {&#10;            errorText = &quot;&quot;&#10;        }&#10;    }&#10;&#10;    val allForegroundGranted = foregroundPermissionState.allPermissionsGranted&#10;    val backgroundGranted = backgroundLocationPermission.status.isGranted&#10;    val allPermissionsGranted = allForegroundGranted &amp;&amp; backgroundGranted&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .then(modifier),&#10;        contentAlignment = if (allPermissionsGranted) {&#10;            contentAlignment&#10;        } else {&#10;            Alignment.Center&#10;        },&#10;    ) {&#10;        if (allPermissionsGranted) {&#10;            onAllPermissionsGranted()&#10;        } else {&#10;            EnhancedPermissionScreen(&#10;                foregroundPermissionState = foregroundPermissionState,&#10;                backgroundLocationPermission = backgroundLocationPermission,&#10;                allForegroundGranted = allForegroundGranted,&#10;                errorText = errorText&#10;            )&#10;&#10;            FloatingActionButton(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomEnd)&#10;                    .padding(16.dp),&#10;                onClick = {&#10;                    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {&#10;                        flags = Intent.FLAG_ACTIVITY_NEW_TASK&#10;                        data = Uri.parse(&quot;package:${context.packageName}&quot;)&#10;                    }&#10;                    context.startActivity(intent)&#10;                },&#10;            ) {&#10;                Icon(imageVector = Icons.Rounded.Settings, contentDescription = &quot;App settings&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;private fun EnhancedPermissionScreen(&#10;    foregroundPermissionState: MultiplePermissionsState,&#10;    backgroundLocationPermission: PermissionState,&#10;    allForegroundGranted: Boolean,&#10;    errorText: String&#10;) {&#10;    var showForegroundRationale by remember { mutableStateOf(false) }&#10;    var showBackgroundRationale by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;            .animateContentSize(),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;    ) {&#10;        Text(&#10;            text = &quot;Sony Camera GPS Permissions&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            modifier = Modifier.padding(bottom = 16.dp),&#10;        )&#10;&#10;        // Step 1: Foreground Location Permissions&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (allForegroundGranted)&#10;                    MaterialTheme.colorScheme.primaryContainer&#10;                else&#10;                    MaterialTheme.colorScheme.surface&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Step 1: Location &amp; Bluetooth Access&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Required for connecting to your Sony camera and accessing location data.&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                if (!allForegroundGranted) {&#10;                    val revokedPermissions = foregroundPermissionState.revokedPermissions&#10;                        .joinToString(&quot;\n&quot;) { &quot; - &quot; + it.permission.removePrefix(&quot;android.permission.&quot;) }&#10;&#10;                    Text(&#10;                        text = &quot;Missing permissions:\n$revokedPermissions&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    Button(&#10;                        onClick = {&#10;                            if (foregroundPermissionState.shouldShowRationale) {&#10;                                showForegroundRationale = true&#10;                            } else {&#10;                                foregroundPermissionState.launchMultiplePermissionRequest()&#10;                            }&#10;                        },&#10;                    ) {&#10;                        Text(text = &quot;Grant Location &amp; Bluetooth Access&quot;)&#10;                    }&#10;                } else {&#10;                    Text(&#10;                        text = &quot;✓ Granted&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Step 2: Background Location Permission (only show if foreground is granted)&#10;        if (allForegroundGranted) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = if (backgroundLocationPermission.status.isGranted)&#10;                        MaterialTheme.colorScheme.primaryContainer&#10;                    else&#10;                        MaterialTheme.colorScheme.surface&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Step 2: Background Location Access&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Allows continuous GPS sync to your camera even when the app is in the background or screen is off.&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                    )&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    if (!backgroundLocationPermission.status.isGranted) {&#10;                        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                            Text(&#10;                                text = &quot;⚠️ On Android 10+, you'll need to select \&quot;Allow all the time\&quot; in the next dialog&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = MaterialTheme.colorScheme.tertiary,&#10;                                modifier = Modifier.padding(bottom = 12.dp)&#10;                            )&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = {&#10;                                if (backgroundLocationPermission.status.shouldShowRationale) {&#10;                                    showBackgroundRationale = true&#10;                                } else {&#10;                                    backgroundLocationPermission.launchPermissionRequest()&#10;                                }&#10;                            },&#10;                        ) {&#10;                            Text(text = &quot;Grant Background Location&quot;)&#10;                        }&#10;                    } else {&#10;                        Text(&#10;                            text = &quot;✓ Granted&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (errorText.isNotBlank()) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = errorText,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = MaterialTheme.colorScheme.error,&#10;            )&#10;        }&#10;    }&#10;&#10;    // Rationale dialogs&#10;    if (showForegroundRationale) {&#10;        AlertDialog(&#10;            onDismissRequest = { showForegroundRationale = false },&#10;            title = { Text(&quot;Location &amp; Bluetooth Access Required&quot;) },&#10;            text = {&#10;                Text(&quot;This app needs location and Bluetooth permissions to:\n&quot; +&#10;                     &quot;• Connect to your Sony camera via Bluetooth\n&quot; +&#10;                     &quot;• Access GPS coordinates to sync with your camera\n&quot; +&#10;                     &quot;• Provide accurate location data for your photos&quot;)&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showForegroundRationale = false&#10;                        foregroundPermissionState.launchMultiplePermissionRequest()&#10;                    }&#10;                ) {&#10;                    Text(&quot;Grant Permissions&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showForegroundRationale = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showBackgroundRationale) {&#10;        AlertDialog(&#10;            onDismissRequest = { showBackgroundRationale = false },&#10;            title = { Text(&quot;Background Location Access&quot;) },&#10;            text = {&#10;                Text(&quot;Background location access enables:\n&quot; +&#10;                     &quot;• Continuous GPS sync when the app is minimized\n&quot; +&#10;                     &quot;• Location tracking even when the screen is off\n&quot; +&#10;                     &quot;• Seamless photo geotagging during long shooting sessions\n\n&quot; +&#10;                     &quot;Please select \&quot;Allow all the time\&quot; in the next dialog.&quot;)&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showBackgroundRationale = false&#10;                        backgroundLocationPermission.launchPermissionRequest()&#10;                    }&#10;                ) {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showBackgroundRationale = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Copyright 2023 The Android Open Source Project&#10; *&#10; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10; * you may not use this file except in compliance with the License.&#10; * You may obtain a copy of the License at&#10; *&#10; *     https://www.apache.org/licenses/LICENSE-2.0&#10; *&#10; * Unless required by applicable law or agreed to in writing, software&#10; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10; * See the License for the specific language governing permissions and&#10; * limitations under the License.&#10; */&#10;&#10;package com.saschl.sonygps.ui&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Build&#10;import android.provider.Settings&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.BoxScope&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.rounded.Settings&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import com.google.accompanist.permissions.ExperimentalPermissionsApi&#10;import com.google.accompanist.permissions.MultiplePermissionsState&#10;import com.google.accompanist.permissions.PermissionState&#10;import com.google.accompanist.permissions.isGranted&#10;import com.google.accompanist.permissions.rememberMultiplePermissionsState&#10;import com.google.accompanist.permissions.rememberPermissionState&#10;import com.google.accompanist.permissions.shouldShowRationale&#10;&#10;/**&#10; * The PermissionBox uses a [Box] to show a simple permission request UI when the provided [permission]&#10; * is revoked or the provided [onGranted] content if the permission is granted.&#10; *&#10; * This composable follows the permission request flow but for a complete example check the samples&#10; * under privacy/permissions&#10; */&#10;@Composable&#10;fun PermissionBox(&#10;    modifier: Modifier = Modifier,&#10;    permission: String,&#10;    description: String? = null,&#10;    contentAlignment: Alignment = Alignment.TopStart,&#10;    onGranted: @Composable BoxScope.() -&gt; Unit,&#10;) {&#10;    PermissionBox(&#10;        modifier,&#10;        permissions = listOf(permission),&#10;        requiredPermissions = listOf(permission),&#10;        description,&#10;        contentAlignment,&#10;    ) { onGranted() }&#10;}&#10;&#10;/**&#10; * A variation of [PermissionBox] that takes a list of permissions and only calls [onGranted] when&#10; * all the [requiredPermissions] are granted.&#10; *&#10; * By default it assumes that all [permissions] are required.&#10; */&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;fun PermissionBox(&#10;    modifier: Modifier = Modifier,&#10;    permissions: List&lt;String&gt;,&#10;    requiredPermissions: List&lt;String&gt; = permissions,&#10;    description: String? = null,&#10;    contentAlignment: Alignment = Alignment.TopStart,&#10;    onGranted: @Composable BoxScope.(List&lt;String&gt;) -&gt; Unit,&#10;) {&#10;    val context = LocalContext.current&#10;    var errorText by remember {&#10;        mutableStateOf(&quot;&quot;)&#10;    }&#10;&#10;    val permissionState = rememberMultiplePermissionsState(permissions = permissions) { map -&gt;&#10;        val rejectedPermissions = map.filterValues { !it }.keys&#10;        errorText = if (rejectedPermissions.none { it in requiredPermissions }) {&#10;            &quot;&quot;&#10;        } else {&#10;            &quot;${rejectedPermissions.joinToString()} required for the sample&quot;&#10;        }&#10;    }&#10;    val allRequiredPermissionsGranted =&#10;        permissionState.revokedPermissions.none { it.permission in requiredPermissions }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .then(modifier),&#10;        contentAlignment = if (allRequiredPermissionsGranted) {&#10;            contentAlignment&#10;        } else {&#10;            Alignment.Center&#10;        },&#10;    ) {&#10;        if (allRequiredPermissionsGranted) {&#10;            onGranted(&#10;                permissionState.permissions&#10;                    .filter { it.status.isGranted }&#10;                    .map { it.permission },&#10;            )&#10;        } else {&#10;            PermissionScreen(&#10;                permissionState,&#10;                description,&#10;                errorText,&#10;            )&#10;&#10;            FloatingActionButton(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomEnd)&#10;                    .padding(16.dp),&#10;                onClick = {&#10;                    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {&#10;                        flags = Intent.FLAG_ACTIVITY_NEW_TASK&#10;                        data = Uri.parse(&quot;package:${context.packageName}&quot;)&#10;                    }&#10;                    context.startActivity(intent)&#10;                },&#10;            ) {&#10;                Icon(imageVector = Icons.Rounded.Settings, contentDescription = &quot;App settings&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;private fun PermissionScreen(&#10;    state: MultiplePermissionsState,&#10;    description: String?,&#10;    errorText: String,&#10;) {&#10;    var showRationale by remember(state) {&#10;        mutableStateOf(false)&#10;    }&#10;&#10;    val permissions = remember(state.revokedPermissions) {&#10;        state.revokedPermissions.joinToString(&quot;\n&quot;) {&#10;            &quot; - &quot; + it.permission.removePrefix(&quot;android.permission.&quot;)&#10;        }&#10;    }&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .animateContentSize(),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;    ) {&#10;        Text(&#10;            text = &quot;Sample requires permission/s:&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            modifier = Modifier.padding(16.dp),&#10;        )&#10;        Text(&#10;            text = permissions,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.padding(16.dp),&#10;        )&#10;        if (description != null) {&#10;            Text(&#10;                text = description,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                modifier = Modifier.padding(16.dp),&#10;            )&#10;        }&#10;        Button(&#10;            onClick = {&#10;                if (state.shouldShowRationale) {&#10;                    showRationale = true&#10;                } else {&#10;                    state.launchMultiplePermissionRequest()&#10;                }&#10;            },&#10;        ) {&#10;            Text(text = &quot;Grant permissions&quot;)&#10;        }&#10;        if (errorText.isNotBlank()) {&#10;            Text(&#10;                text = errorText,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                modifier = Modifier.padding(16.dp),&#10;            )&#10;        }&#10;    }&#10;    if (showRationale) {&#10;        AlertDialog(&#10;            onDismissRequest = {&#10;                showRationale = false&#10;            },&#10;            title = {&#10;                Text(text = &quot;Permissions required by the sample&quot;)&#10;            },&#10;            text = {&#10;                Text(text = &quot;The sample requires the following permissions to work:\n $permissions&quot;)&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showRationale = false&#10;                        state.launchMultiplePermissionRequest()&#10;                    },&#10;                ) {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showRationale = false&#10;                    },&#10;                ) {&#10;                    Text(&quot;Dismiss&quot;)&#10;                }&#10;            },&#10;        )&#10;    }&#10;}&#10;&#10;/**&#10; * Enhanced PermissionBox that properly handles background location permission according to Android guidelines.&#10; * For Android 10+ (API 29+), background location must be requested separately from foreground location.&#10; */&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;fun EnhancedLocationPermissionBox(&#10;    modifier: Modifier = Modifier,&#10;    contentAlignment: Alignment = Alignment.TopStart,&#10;    onAllPermissionsGranted: @Composable BoxScope.() -&gt; Unit,&#10;) {&#10;    val context = LocalContext.current&#10;    var errorText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Foreground location permissions&#10;    val foregroundLocationPermissions = listOf(&#10;        Manifest.permission.ACCESS_FINE_LOCATION,&#10;        Manifest.permission.BLUETOOTH_CONNECT&#10;    )&#10;&#10;    val foregroundPermissionState = rememberMultiplePermissionsState(&#10;        permissions = foregroundLocationPermissions&#10;    ) { map -&gt;&#10;        val rejectedPermissions = map.filterValues { !it }.keys&#10;        errorText = if (rejectedPermissions.isNotEmpty()) {&#10;            &quot;${rejectedPermissions.joinToString()} required for the app to function&quot;&#10;        } else {&#10;            &quot;&quot;&#10;        }&#10;    }&#10;&#10;    // Background location permission (separate for Android 10+)&#10;    val backgroundLocationPermission = rememberPermissionState(&#10;        permission = Manifest.permission.ACCESS_BACKGROUND_LOCATION&#10;    ) { granted -&gt;&#10;        if (!granted) {&#10;            errorText = &quot;Background location access required for continuous GPS sync when app is not in foreground&quot;&#10;        } else {&#10;            errorText = &quot;&quot;&#10;        }&#10;    }&#10;&#10;    val allForegroundGranted = foregroundPermissionState.allPermissionsGranted&#10;    val backgroundGranted = backgroundLocationPermission.status.isGranted&#10;    val allPermissionsGranted = allForegroundGranted &amp;&amp; backgroundGranted&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .then(modifier),&#10;        contentAlignment = if (allPermissionsGranted) {&#10;            contentAlignment&#10;        } else {&#10;            Alignment.Center&#10;        },&#10;    ) {&#10;        if (allPermissionsGranted) {&#10;            onAllPermissionsGranted()&#10;        } else {&#10;            EnhancedPermissionScreen(&#10;                foregroundPermissionState = foregroundPermissionState,&#10;                backgroundLocationPermission = backgroundLocationPermission,&#10;                allForegroundGranted = allForegroundGranted,&#10;                errorText = errorText&#10;            )&#10;&#10;            FloatingActionButton(&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomEnd)&#10;                    .padding(16.dp),&#10;                onClick = {&#10;                    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {&#10;                        flags = Intent.FLAG_ACTIVITY_NEW_TASK&#10;                        data = Uri.parse(&quot;package:${context.packageName}&quot;)&#10;                    }&#10;                    context.startActivity(intent)&#10;                },&#10;            ) {&#10;                Icon(imageVector = Icons.Rounded.Settings, contentDescription = &quot;App settings&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalPermissionsApi::class)&#10;@Composable&#10;private fun EnhancedPermissionScreen(&#10;    foregroundPermissionState: MultiplePermissionsState,&#10;    backgroundLocationPermission: PermissionState,&#10;    allForegroundGranted: Boolean,&#10;    errorText: String&#10;) {&#10;    var showForegroundRationale by remember { mutableStateOf(false) }&#10;    var showBackgroundRationale by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;            .animateContentSize(),&#10;        verticalArrangement = Arrangement.Center,&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;    ) {&#10;        Text(&#10;            text = &quot;Sony Camera GPS Permissions&quot;,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            modifier = Modifier.padding(bottom = 16.dp),&#10;        )&#10;&#10;        // Step 1: Foreground Location Permissions&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (allForegroundGranted)&#10;                    MaterialTheme.colorScheme.primaryContainer&#10;                else&#10;                    MaterialTheme.colorScheme.surface&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Step 1: Location &amp; Bluetooth Access&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Required for connecting to your Sony camera and accessing location data.&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                if (!allForegroundGranted) {&#10;                    val revokedPermissions = foregroundPermissionState.revokedPermissions&#10;                        .joinToString(&quot;\n&quot;) { &quot; - &quot; + it.permission.removePrefix(&quot;android.permission.&quot;) }&#10;&#10;                    Text(&#10;                        text = &quot;Missing permissions:\n$revokedPermissions&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    Button(&#10;                        onClick = {&#10;                            if (foregroundPermissionState.shouldShowRationale) {&#10;                                showForegroundRationale = true&#10;                            } else {&#10;                                foregroundPermissionState.launchMultiplePermissionRequest()&#10;                            }&#10;                        },&#10;                    ) {&#10;                        Text(text = &quot;Grant Location &amp; Bluetooth Access&quot;)&#10;                    }&#10;                } else {&#10;                    Text(&#10;                        text = &quot;✓ Granted&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Step 2: Background Location Permission (only show if foreground is granted)&#10;        if (allForegroundGranted) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = if (backgroundLocationPermission.status.isGranted)&#10;                        MaterialTheme.colorScheme.primaryContainer&#10;                    else&#10;                        MaterialTheme.colorScheme.surface&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Step 2: Background Location Access&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Allows continuous GPS sync to your camera even when the app is in the background or screen is off.&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                    )&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    if (!backgroundLocationPermission.status.isGranted) {&#10;                        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                            Text(&#10;                                text = &quot;⚠️ On Android 10+, you'll need to select \&quot;Allow all the time\&quot; in the next dialog&quot;,&#10;                                style = MaterialTheme.typography.bodySmall,&#10;                                color = MaterialTheme.colorScheme.tertiary,&#10;                                modifier = Modifier.padding(bottom = 12.dp)&#10;                            )&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = {&#10;                                if (backgroundLocationPermission.status.shouldShowRationale) {&#10;                                    showBackgroundRationale = true&#10;                                } else {&#10;                                    backgroundLocationPermission.launchPermissionRequest()&#10;                                }&#10;                            },&#10;                        ) {&#10;                            Text(text = &quot;Grant Background Location&quot;)&#10;                        }&#10;                    } else {&#10;                        Text(&#10;                            text = &quot;✓ Granted&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (errorText.isNotBlank()) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = errorText,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = MaterialTheme.colorScheme.error,&#10;            )&#10;        }&#10;    }&#10;&#10;    // Rationale dialogs&#10;    if (showForegroundRationale) {&#10;        AlertDialog(&#10;            onDismissRequest = { showForegroundRationale = false },&#10;            title = { Text(&quot;Location &amp; Bluetooth Access Required&quot;) },&#10;            text = {&#10;                Text(&quot;This app needs location and Bluetooth permissions to:\n&quot; +&#10;                     &quot;• Connect to your Sony camera via Bluetooth\n&quot; +&#10;                     &quot;• Access GPS coordinates to sync with your camera\n&quot; +&#10;                     &quot;• Provide accurate location data for your photos&quot;)&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showForegroundRationale = false&#10;                        foregroundPermissionState.launchMultiplePermissionRequest()&#10;                    }&#10;                ) {&#10;                    Text(&quot;Grant Permissions&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showForegroundRationale = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    if (showBackgroundRationale) {&#10;        AlertDialog(&#10;            onDismissRequest = { showBackgroundRationale = false },&#10;            title = { Text(&quot;Background Location Access&quot;) },&#10;            text = {&#10;                Text(&quot;Background location access enables:\n&quot; +&#10;                     &quot;• Continuous GPS sync when the app is minimized\n&quot; +&#10;                     &quot;• Location tracking even when the screen is off\n&quot; +&#10;                     &quot;• Seamless photo geotagging during long shooting sessions\n\n&quot; +&#10;                     &quot;Please select \&quot;Allow all the time\&quot; in the next dialog.&quot;)&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        showBackgroundRationale = false&#10;                        backgroundLocationPermission.launchPermissionRequest()&#10;                    }&#10;                ) {&#10;                    Text(&quot;Continue&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showBackgroundRationale = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/saschl/sonygps/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/saschl/sonygps/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.saschl.sonygps.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun ForegroundService14Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.saschl.sonygps.ui.theme&#10;&#10;import android.app.Activity&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun ForegroundService14Theme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            val insetsController = WindowCompat.getInsetsController(window, view)&#10;            insetsController.isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#3DDC84&quot;&#10;        android:pathData=&quot;M0,0h108v108h-108z&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M9,0L9,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M19,0L19,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M29,0L29,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M39,0L39,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M49,0L49,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M59,0L59,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M69,0L69,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M79,0L79,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M89,0L89,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M99,0L99,108&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,9L108,9&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,19L108,19&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,29L108,29&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,39L108,39&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,49L108,49&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,59L108,59&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,69L108,69&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,79L108,79&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,89L108,89&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M0,99L108,99&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M19,29L89,29&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M19,39L89,39&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M19,49L89,49&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M19,59L89,59&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M19,69L89,69&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M19,79L89,79&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M29,19L29,89&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M39,19L39,89&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M49,19L49,89&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M59,19L59,89&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M69,19L69,89&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M79,19L79,89&quot;&#10;        android:strokeWidth=&quot;0.8&quot;&#10;        android:strokeColor=&quot;#33FFFFFF&quot; /&gt;&#10;&lt;/vector&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;    &#10;    &lt;!-- Dark background for better contrast --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#1A1A1A&quot;&#10;        android:pathData=&quot;M0,0h108v108h-108z&quot; /&gt;&#10;    &#10;    &lt;!-- Subtle circular gradient for depth --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#2D2D2D&quot;&#10;        android:pathData=&quot;M54,54m-40,0a40,40 0,1 1,80 0a40,40 0,1 1,-80 0&quot;/&gt;&#10;    &#10;    &lt;!-- Inner circle with slight highlight --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#333333&quot;&#10;        android:pathData=&quot;M54,54m-30,0a30,30 0,1 1,60 0a30,30 0,1 1,-60 0&quot;/&gt;&#10;    &#10;    &lt;!-- GPS coordinate grid lines - subtle --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M24,20L24,88&quot;&#10;        android:strokeWidth=&quot;0.5&quot;&#10;        android:strokeColor=&quot;#404040&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M54,20L54,88&quot;&#10;        android:strokeWidth=&quot;0.5&quot;&#10;        android:strokeColor=&quot;#404040&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M84,20L84,88&quot;&#10;        android:strokeWidth=&quot;0.5&quot;&#10;        android:strokeColor=&quot;#404040&quot; /&gt;&#10;    &#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M20,24L88,24&quot;&#10;        android:strokeWidth=&quot;0.5&quot;&#10;        android:strokeColor=&quot;#404040&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M20,54L88,54&quot;&#10;        android:strokeWidth=&quot;0.5&quot;&#10;        android:strokeColor=&quot;#404040&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00000000&quot;&#10;        android:pathData=&quot;M20,84L88,84&quot;&#10;        android:strokeWidth=&quot;0.5&quot;&#10;        android:strokeColor=&quot;#404040&quot; /&gt;&#10;    &#10;    &lt;!-- Corner GPS coordinates accent --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M10,10h8v8h-8z&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M90,10h8v8h-8z&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M10,90h8v8h-8z&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M90,90h8v8h-8z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;&#10;    &lt;!-- Camera Body --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M20,4h-3.17L15,2H9L7.17,4H4C2.9,4 2,4.9 2,6v12c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2V6C22,4.9 21.1,4 20,4z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Lens Outer Ring --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/black&quot;&#10;        android:pathData=&quot;M12,8.5c-2.21,0 -4,1.79 -4,4s1.79,4 4,4s4,-1.79 4,-4S14.21,8.5 12,8.5z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Lens Inner --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#666666&quot;&#10;        android:pathData=&quot;M12,10c-1.38,0 -2.5,1.12 -2.5,2.5S10.62,15 12,15s2.5,-1.12 2.5,-2.5S13.38,10 12,10z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Needle/Compass --&gt;&#10;    &lt;!-- Needle Base Circle --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF4444&quot;&#10;        android:pathData=&quot;M12,11.2c-0.44,0 -0.8,0.36 -0.8,0.8s0.36,0.8 0.8,0.8s0.8,-0.36 0.8,-0.8S12.44,11.2 12,11.2z&quot;/&gt;&#10;&#10;    &lt;!-- North Needle (Red) --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF4444&quot;&#10;        android:pathData=&quot;M12,10.5l-0.3,1.5h0.6L12,10.5z&quot;/&gt;&#10;&#10;    &lt;!-- South Needle (White) --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,13.5l-0.3,-1.5h0.6L12,13.5z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Flash --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M18.5,7c-0.28,0 -0.5,-0.22 -0.5,-0.5S18.22,6 18.5,6S19,6.22 19,6.5S18.78,7 18.5,7z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Signal Waves --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:strokeWidth=&quot;0.5&quot;&#10;        android:strokeColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M16,6.5c0,0.3 -0.1,0.5 -0.2,0.7l0.4,0.4c0.2,-0.3 0.3,-0.7 0.3,-1.1s-0.1,-0.8 -0.3,-1.1l-0.4,0.4C15.9,6 16,6.2 16,6.5z&quot;/&gt;&#10;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:strokeWidth=&quot;0.5&quot;&#10;        android:strokeColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M17,6.5c0,0.6 -0.2,1.1 -0.5,1.5l0.4,0.4c0.4,-0.5 0.6,-1.2 0.6,-1.9s-0.2,-1.4 -0.6,-1.9l-0.4,0.4C16.8,5.4 17,5.9 17,6.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;&#10;    &lt;!-- Camera Body - positioned and scaled for launcher icon --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#E8E8E8&quot;&#10;        android:pathData=&quot;M80,25h-12.68L62,15H46L40.68,25H28C25.8,25 24,26.8 24,29v48c0,2.2 1.8,4 4,4h48c2.2,0 4,-1.8 4,-4V29C80,26.8 78.2,25 76,25z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Top Section --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#D0D0D0&quot;&#10;        android:pathData=&quot;M62,15H46l-5.32,10h26.64L62,15z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Lens Outer Ring --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#2C2C2C&quot;&#10;        android:pathData=&quot;M54,38c-8.84,0 -16,7.16 -16,16s7.16,16 16,16s16,-7.16 16,-16S62.84,38 54,38z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Lens Middle Ring --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#404040&quot;&#10;        android:pathData=&quot;M54,42c-6.63,0 -12,5.37 -12,12s5.37,12 12,12s12,-5.37 12,-12S60.63,42 54,42z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Lens Inner --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#1A1A1A&quot;&#10;        android:pathData=&quot;M54,46c-4.42,0 -8,3.58 -8,8s3.58,8 8,8s8,-3.58 8,-8S58.42,46 54,46z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Compass Center --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF4444&quot;&#10;        android:pathData=&quot;M54,51c-1.66,0 -3,1.34 -3,3s1.34,3 3,3s3,-1.34 3,-3S55.66,51 54,51z&quot;/&gt;&#10;&#10;    &lt;!-- North Needle (Red) --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF4444&quot;&#10;        android:pathData=&quot;M54,46l-2,5h4L54,46z&quot;/&gt;&#10;&#10;    &lt;!-- South Needle (White) --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M54,62l-2,-5h4L54,62z&quot;/&gt;&#10;&#10;    &lt;!-- East Needle (Gray) --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M62,54l-5,-2v4L62,54z&quot;/&gt;&#10;&#10;    &lt;!-- West Needle (Gray) --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M46,54l5,-2v4L46,54z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Flash --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M72,32c-1.1,0 -2,-0.9 -2,-2s0.9,-2 2,-2s2,0.9 2,2S73.1,32 72,32z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Viewfinder --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M36,32c-1.1,0 -2,-0.9 -2,-2s0.9,-2 2,-2s2,0.9 2,2S37.1,32 36,32z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Signal Waves --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeColor=&quot;#4CAF50&quot;&#10;        android:fillType=&quot;nonZero&quot;&#10;        android:pathData=&quot;M75,20c0,2 -1,4 -2,5l2,2c2,-2 3,-5 3,-7s-1,-5 -3,-7l-2,2C74,16 75,18 75,20z&quot;/&gt;&#10;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeColor=&quot;#4CAF50&quot;&#10;        android:fillType=&quot;nonZero&quot;&#10;        android:pathData=&quot;M81,20c0,4 -2,8 -4,11l2,2c3,-4 5,-8 5,-13s-2,-9 -5,-13l-2,2C79,12 81,16 81,20z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Coordinate Text --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M85,88h15v3h-15z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M8,88h15v3h-15z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground_round.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground_round.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;&#10;    &lt;!-- Camera Body - circular design for round icon --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#E8E8E8&quot;&#10;        android:pathData=&quot;M54,54m-35,0a35,35 0,1 1,70 0a35,35 0,1 1,-70 0&quot;/&gt;&#10;&#10;    &lt;!-- Camera top section - arc design --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#D0D0D0&quot;&#10;        android:pathData=&quot;M54,19m-15,0a15,15 0,0 1,15 15a15,15 0,0 1,-15 -15&quot;/&gt;&#10;&#10;    &lt;!-- Camera grip texture lines --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M25,45h6v2h-6z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M25,50h6v2h-6z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M25,55h6v2h-6z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M25,60h6v2h-6z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Lens Outer Ring --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#2C2C2C&quot;&#10;        android:pathData=&quot;M54,35c-10.49,0 -19,8.51 -19,19s8.51,19 19,19s19,-8.51 19,-19S64.49,35 54,35z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Lens Middle Ring --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#404040&quot;&#10;        android:pathData=&quot;M54,40c-7.73,0 -14,6.27 -14,14s6.27,14 14,14s14,-6.27 14,-14S61.73,40 54,40z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Lens Inner --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#1A1A1A&quot;&#10;        android:pathData=&quot;M54,45c-4.97,0 -9,4.03 -9,9s4.03,9 9,9s9,-4.03 9,-9S58.97,45 54,45z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Compass Rose Background --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#333333&quot;&#10;        android:pathData=&quot;M54,49c-2.76,0 -5,2.24 -5,5s2.24,5 5,5s5,-2.24 5,-5S56.76,49 54,49z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Compass Center --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF4444&quot;&#10;        android:pathData=&quot;M54,52c-1.1,0 -2,0.9 -2,2s0.9,2 2,2s2,-0.9 2,-2S55.1,52 54,52z&quot;/&gt;&#10;&#10;    &lt;!-- North Needle (Red) - pointing up --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF4444&quot;&#10;        android:pathData=&quot;M54,47l-1.5,4h3L54,47z&quot;/&gt;&#10;&#10;    &lt;!-- South Needle (White) - pointing down --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M54,61l-1.5,-4h3L54,61z&quot;/&gt;&#10;&#10;    &lt;!-- East Needle (Light Gray) --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M61,54l-4,-1.5v3L61,54z&quot;/&gt;&#10;&#10;    &lt;!-- West Needle (Light Gray) --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#CCCCCC&quot;&#10;        android:pathData=&quot;M47,54l4,-1.5v3L47,54z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Flash - positioned for round design --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M69,39c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3s3,1.34 3,3S70.66,39 69,39z&quot;/&gt;&#10;&#10;    &lt;!-- Camera Brand Logo Area --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M45,25h8v3h-8z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Signal Waves - positioned for circular layout --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeColor=&quot;#4CAF50&quot;&#10;        android:fillType=&quot;nonZero&quot;&#10;        android:pathData=&quot;M75,30c0,1.5 -0.5,3 -1.5,4l1.5,1.5c1.5,-1.5 2.5,-3.5 2.5,-5.5s-1,-4 -2.5,-5.5L73.5,26C74.5,27 75,28.5 75,30z&quot;/&gt;&#10;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeColor=&quot;#4CAF50&quot;&#10;        android:fillType=&quot;nonZero&quot;&#10;        android:pathData=&quot;M80,30c0,3 -1.5,6 -3,8l1.5,1.5c2,-2.5 3.5,-5.5 3.5,-9.5s-1.5,-7 -3.5,-9.5L77,22C78.5,24 80,27 80,30z&quot;/&gt;&#10;&#10;    &lt;!-- GPS Coordinate Indicators --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M30,78c-1.1,0 -2,0.9 -2,2s0.9,2 2,2s2,-0.9 2,-2S31.1,78 30,78z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M78,78c-1.1,0 -2,0.9 -2,2s0.9,2 2,2s2,-0.9 2,-2S79.1,78 78,78z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M30,30c-1.1,0 -2,0.9 -2,2s0.9,2 2,2s2,-0.9 2,-2S31.1,30 30,30z&quot;/&gt;&#10;&#10;    &lt;!-- Sony Camera Style Details --&gt;&#10;    &lt;!-- Mode dial --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#BBBBBB&quot;&#10;        android:pathData=&quot;M39,35c-2.21,0 -4,-1.79 -4,-4s1.79,-4 4,-4s4,1.79 4,4S41.21,35 39,35z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#999999&quot;&#10;        android:pathData=&quot;M39,33c-1.1,0 -2,-0.9 -2,-2s0.9,-2 2,-2s2,0.9 2,2S40.1,33 39,33z&quot;/&gt;&#10;&#10;    &lt;!-- Camera strap lug --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#AAAAAA&quot;&#10;        android:pathData=&quot;M25,35h3v6h-3z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#AAAAAA&quot;&#10;        android:pathData=&quot;M80,35h3v6h-3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi/ic_launcher_round.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi/ic_launcher_round.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;background android:drawable=&quot;@drawable/ic_launcher_background&quot; /&gt;&#10;    &lt;foreground android:drawable=&quot;@drawable/ic_launcher_foreground_round&quot; /&gt;&#10;    &lt;monochrome android:drawable=&quot;@drawable/ic_launcher_foreground_round&quot; /&gt;&#10;&lt;/adaptive-icon&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>